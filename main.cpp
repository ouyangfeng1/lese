#include <string>
#include <vector>
#include <iostream>
#include <EyeTrackerLib\IO.h>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/highgui.hpp>
#include <EyeTrackerLib\EyeTrackerModel.h>
#include <EyeTrackerLib\CoordinateTransformer.h>
#include "OpticalAxisComputation.h"

using namespace std;
using namespace cv;

vector<Point3d> gDesignedLeftLeds =
{
	{ -21.6, -8.7, 6.8 },{ -10.1, -3.5, 2.5 },{ 11.1, -3.5, 2.5 },{ 22.6, -8.7, 6.8 }
};

vector<Point3d> gDesignedRightLeds =
{
	{ -22.6, -8.7, 6.8 },{ 1.1, -3.5, 2.5 },{ 10.1, -3.5, 2.5 },{ 21.6, -8.7, 6.8 }
};

vector<vector<Point3d>> gLeftReflectionRays =
{
	//15019265847377780000.bmp
	{
		{ -0.0251975, 0.160599, -0.986698 },{ -0.0733619, 0.12865, -0.988973 },{ -0.165309, 0.133406, -0.977178 },{ -0.211989, 0.169703, -0.962425 }
	},
	//15019265858374910000.bmp
	{
		{ -0.0251863, 0.167649, -0.985525 },{ -0.0715506, 0.137508, -0.987913 },{ -0.163493, 0.140466, -0.976493 },{ -0.213592, 0.178391, -0.960497 }
	},
	//15019265866039600000.bmp
	{
		{ -0.0305271, 0.16764, -0.985376 },{ -0.0768928, 0.135718, -0.987759 },{ -0.170509, 0.140403, -0.975302 },{ -0.218779, 0.178311, -0.959344 }
	},

	//15019266497042290000.bmp
	{
		{ 0.175179, 0.149147, -0.973174 },{ 0.12797, 0.107143, -0.985974 },{ 0.0336875, 0.105668, -0.993831 },{ -0.0109574, 0.141178, -0.989924 }
	},
	//15019266504040560000.bmp
	{
		{ 0.180351, 0.156112, -0.971135 },{ 0.131469, 0.114211, -0.984719 },{ 0.0408141, 0.114544, -0.992579 },{ -0.00560373, 0.148256, -0.988933 }
	},
	//15019266513704660000.bmp
	{
		{ 0.175049, 0.161429, -0.971236 },{ 0.127902, 0.119542, -0.984556 },{ 0.0354547, 0.118104, -0.992368 },{ -0.00916723, 0.153555, -0.988098 }
	},

	//15019266906102500000.bmp
	{
		{ 0.253049, 0.155141, -0.954933 },{ 0.206933, 0.11366, -0.97173 },{ 0.113784, 0.110758, -0.987312 },{ 0.0674663, 0.142828, -0.987445 }
	},
	//15019266962587930000.bmp
	{
		{ 0.282102, 0.149443, -0.947674 },{ 0.236449, 0.108102, -0.965612 },{ 0.142127, 0.103524, -0.98442 },{ 0.0959357, 0.133866, -0.986345 }
	},
	//15019266976917410000.bmp
	{
		{ 0.285491, 0.149384, -0.946668 },{ 0.238192, 0.106327, -0.96538 },{ 0.145667, 0.101733, -0.984089 },{ 0.0977189, 0.132088, -0.98641 }
	},

	//15019268667144670000.bmp
	{
		{ 0.168783, 0.0537165, -0.984188 },{ 0.133535, 0.0199655, -0.990843 },{ 0.0587814, 0.0182135, -0.998105 },{ 0.0212199, 0.045041, -0.99876 }
	},
	//15019268697470200000.bmp
	{
		{ 0.196829, 0.0571661, -0.97877 },{ 0.158277, 0.0235072, -0.987115 },{ 0.0802012, 0.0199937, -0.996578 },{ 0.0408932, 0.0486053, -0.997981 }
	},
	//15019268705301540000.bmp
	{
		{ 0.20033, 0.0553801, -0.978162 },{ 0.161802, 0.0235036, -0.986543 },{ 0.0855506, 0.0182053, -0.996167 },{ 0.0462587, 0.0450284, -0.997914 }
	},

	//15019268929576470000.bmp
	{
		{ 0.205559, 0.0571307, -0.976976 },{ 0.170608, 0.021716, -0.9851 },{ 0.101579, 0.0164138, -0.994692 },{ 0.0676956, 0.0432244, -0.996769 }
	},
	//15019268936908100000.bmp
	{
		{ 0.207295, 0.0588943, -0.976504 },{ 0.170606, 0.0234943, -0.985059 },{ 0.101578, 0.0199841, -0.994627 },{ 0.0694767, 0.0467941, -0.996485 }
	},
	//15019268948571540000.bmp
	{
		{ 0.212543, 0.0535607, -0.975683 },{ 0.177641, 0.0199315, -0.983894 },{ 0.108694, 0.0146265, -0.993968 },{ 0.074835, 0.0414316, -0.996335 }
	},

	//15019269153018400000.bmp
	{
		{ 0.203886, 0.0340959, -0.978401 },{ 0.170614, 0.00215243, -0.985336 },{ 0.105137, -0.00143725, -0.994457 },{ 0.0730639, 0.02357, -0.997049 }
	},
	//15019269167348150000.bmp
	{
		{ 0.202132, 0.0376466, -0.978634 },{ 0.167095, 0.00570904, -0.985924 },{ 0.10158, 0.00213186, -0.994825 },{ 0.0677075, 0.0271463, -0.997336 }
	},
	//15019269175679200000.bmp
	{
		{ 0.203874, 0.0394153, -0.978203 },{ 0.168855, 0.00748805, -0.985612 },{ 0.105138, 0.00391763, -0.99445 },{ 0.0712764, 0.0289311, -0.997037 }
	},
};

//从各帧图像中提取的反射光线方向向量ri，按LED 2，4，5，7顺序排列
vector<vector<Point3d>> gRightReflectionRays =
{

	//15019269845671790001.bmp
	{
		{ 0.173263, -0.149974, -0.97339 },{ 0.143158, -0.178275, -0.973511 },{ 0.0778558, -0.182317, -0.980153 },{ 0.0477924, -0.159659, -0.986015 }
	},
	//15019269867332670001.bmp
	{
		{ 0.174868, -0.162198, -0.97114 },{ 0.143, -0.192207, -0.97088 },{ 0.0777798, -0.194536, -0.977807 },{ 0.0477573, -0.170198, -0.984252 }
	},
	//15019269886161130001.bmp
	{
		{ 0.162604, -0.16409, -0.972951 },{ 0.13071, -0.192345, -0.972583 },{ 0.0653794, -0.196352, -0.978351 },{ 0.037095, -0.17023, -0.984706 }
	},
	//15019270272227390001.bmp
	{
		{ 0.0300751, -0.120871, -0.992213 },{ 0.00330985, -0.145643, -0.989332 },{ -0.0607942, -0.14553, -0.987484 },{ -0.0911162, -0.118913, -0.988715 }
	},
	//15019270281558440001.bmp
	{
		{ 0.0318751, -0.110233, -0.993395 },{ 0.00152906, -0.133281, -0.991077 },{ -0.0590532, -0.13495, -0.989091 },{ -0.0893789, -0.11007, -0.989897 }
	},
	//15019270307052090001.bmp
	{
		{ 0.0389871, -0.122626, -0.991687 },{ 0.0122177, -0.147402, -0.989001 },{ -0.0536746, -0.147318, -0.987632 },{ -0.082226, -0.120721, -0.989275 }
	},
	//15019270825750210001.bmp
	{
		{ 0.0391017, -0.0389903, -0.998474 },{ 0.00868758, -0.0622121, -0.998025 },{ -0.0538798, -0.0621732, -0.99661 },{ -0.0860294, -0.0353679, -0.995665 }
	},
	//15019270836913950001.bmp
	{
		{ 0.0391017, -0.0389903, -0.998474 },{ 0.00868715, -0.0639957, -0.997912 },{ -0.0538798, -0.0621732, -0.99661 },{ -0.0842475, -0.0353705, -0.995817 }
	},
	//15019270850243850001.bmp
	{
		{ 0.0426742, -0.0425592, -0.998182 },{ 0.0104744, -0.0675616, -0.99766 },{ -0.0503034, -0.0657435, -0.996568 },{ -0.0824573, -0.040726, -0.995762 }
	},
};

vector<Point2d> pupil_left407 = {
	{402,133},{399,126},{408,124},{275,135},{269,133},
	{269,128},{211,140},{194,147},{193,145},{257,201},
	{233,197},{232,200},{228,191},{224,186},{226,190},
	{232,199},{237,202},{232,199}
};
vector<Point2d> pupil_right407 = {
	{259,321},{256,329},{269,327},{333,302},{336,296},
	{333,303},{350,247},{348,248},{347,251}
};

vector<Point2d> boardPoints_left = {
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
};
vector<Point2d> boardPoints_right = {
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
	{98,29},{307,42},{513,22},{112,238},{507,232},{94,450},{310,436},{528,447},
};
vector<Point2d> image_led_left = {
	{214,296},{214,296},{214,296},{256,170},{256,170},{256,170},{289,270},{289,270},{289,270},{375,249},{375,249},{375,249},{348,115},{348,115},{348,115},{302,124},{302,124},{302,124},
};
vector<Point2d> image_led_right = {
	{246,196},{246,196},{246,196},{357,214},{357,214},{357,214},{197,180},{197,180},{197,180},
};

vector<Point3d> mirrorFeatures =
{
	{50, 50, -100}, {500, 50, 0}, {950, 50, -100},
	{50, 500, 0}, {950, 500, 0},
	{50, 950, -100}, {500, 950, 0}, {950, 950, -100}
};

Mat rgb2left = (cv::Mat_<double>(4, 4) <<
	-0.9999775996303462, 0.002893024899163718, -0.006035780352560239, -10.75680947112728,
	0.005757982900357527, 0.8315881536299276, -0.555362933922752, -21.80486713785064,
	0.003412604643190225, -0.5553852475078006, -0.831586183735786, -41.10606229870668,
	0, 0, 0, 1);
Mat rgb2right = (cv::Mat_<double>(4, 4) <<
	-0.9989491653496816, 0.03550653194836185, 0.02898018695893412, 3.830081934547691,
	0.01850989692671483, 0.8910031068702745, -0.4536197165724618, 9.688213645121728,
	-0.04192789957697865, -0.4526066169826931, -0.8907240321786229, 8.9023703553344,
	0, 0, 0, 1);

int main() {
	CameraIntrinsics leftIrIntrinsics;
	CameraIntrinsics rightIrIntrinsics;
	CameraIntrinsics rgbIntrinsics;
	LoadCameraIntrinsics("left.txt", leftIrIntrinsics);
	LoadCameraIntrinsics("right.txt", rightIrIntrinsics);
	LoadCameraIntrinsics("rgb.txt", rgbIntrinsics);

	vector<double> lambda_range = GenerateRange(20.0, 1.0, 30);
	vector<Point3d> cornea_centers = ComputeCorneaCenters(7.8, lambda_range, gDesignedLeftLeds, gLeftReflectionRays, leftIrIntrinsics.cameraMatrix);
	
	/*vector<Point3d> approximate_pupils = ComputeImagingRays(leftIrIntrinsics, pupil_left407);
	vector<double> approximate_pupil_center = ComputeApproximatePupilCenter(cornea_centers, approximate_pupils);
	vector<Point3d> approximate_optical_axis = computeApproximateOpticalAxis(approximate_pupil_center, approximate_pupils, cornea_centers);
	vector<Point2d> pupil_in_pic = Camera2Picture(approximate_pupil_center, approximate_pupils, leftIrIntrinsics.cameraMatrix);
	vector<Point2d>	cornea_in_pic = Camera2Picture(cornea_centers, leftIrIntrinsics.cameraMatrix);*/

	vector<Point3d> gaze_targets_in_rgb = locateGazeTarget(mirrorFeatures, boardPoints_left, image_led_left, rgbIntrinsics);
	CoorndateTransformer rgb2ir_left(rgb2left);
	vector<Point3d> fixation_left = rgb2ir_left.transformPoints(gaze_targets_in_rgb);
	/*for (int i = 0; i < fixation_left.size(); i++) {
		fixation_left[i].z = -fixation_left[i].z;
	}
	vector<Point2d> fixation_left_in_pic = Camera2Picture(fixation_left, rgbIntrinsics.cameraMatrix);
	vector<Point2d> app_optiacal = computeAxis(pupil_in_pic, cornea_in_pic);
	vector<Point2d> app_visual = computeAxis(fixation_left_in_pic, cornea_in_pic);*/

	/*for (int i = 0; i < fixation_left_in_pic.size(); i++) {
		double length = sqrt(app_optiacal[i].ddot(app_optiacal[i]));
		app_visual[i] = app_visual[i] / sqrt(app_visual[i].ddot(app_visual[i]))*length;
		fixation_left_in_pic[i] = cornea_in_pic[i] + app_visual[i];
	}*/

	double rc = 7.8;
	double na = 1;
	double nb = 1.35;
	double h = 2;
	Point3d cornea_center0 = cornea_centers[0];

	vector<Point2d> Gk =
	{
		{390,78}, {461,140}, {404,193}, {331,134},
		{447,106}, {339,101}, {370,187}, {452,169},
	};

	vector<Point3d> Gks = ComputeImagingRays(leftIrIntrinsics, Gk);
	vector<Point3d> Rk = ComputeIncidentPoints(cornea_center0, 7.8, Gks);
	vector<Point3d> nk = ComputeSphericalSurfaceNormals(cornea_center0, Rk);
	vector<Point3d> fk = ComputeRefractedLights(Rk, nk, nb);

	Vec4d startingPoint = { 1, 1 ,10, 1 };
	Vec4d real_pupil = ComputePupilCenter(fk, Rk, cornea_center0, h, startingPoint);
	Point3d realpupil3d(real_pupil[0], real_pupil[1], real_pupil[2]);
	Point2d realpupil = Camera2Picture(realpupil3d, leftIrIntrinsics.cameraMatrix);
	cout << realpupil3d << endl;

	/*Point3d line_a = realpupil3d - cornea_center0;
	line_a /= sqrt(line_a.ddot(line_a));
	Point3d line_b = approximate_pupil_center[0] * approximate_pupils[0] - cornea_center0;
	line_b /= sqrt(line_b.ddot(line_b));
	Point3d line_c = fixation_left[0] - cornea_center0;
	line_c /= sqrt(line_c.ddot(line_c));
	Point3d pupildiff = approximate_pupil_center[0] * approximate_pupils[0] - realpupil3d;


	double ab = acos(line_a.ddot(line_b));
	cout << ab * 180 / CV_PI << endl;
	double ac = acos(line_a.ddot(line_c));
	cout << ac * 180 / CV_PI << endl;
	double bc = acos(line_c.ddot(line_b));
	cout << bc * 180 / CV_PI << endl;
	cout << sqrt(pupildiff.dot(pupildiff)) << endl;*/

	/*std::string path = "irleft";
	std::vector<cv::String> filenames;
	cv::glob(path, filenames);
	for (int ii = 0; ii < filenames.size(); ii++) {
		Mat src = imread(filenames[ii]);
		if (ii == 0) {
			line(src, realpupil, cornea_in_pic[ii], Scalar(0, 255, 0), 2);
			circle(src, realpupil, 2, Scalar(255, 255, 255));
		}
		line(src, pupil_in_pic[ii], cornea_in_pic[ii], Scalar(33, 33, 133), 2);
		line(src, fixation_left_in_pic[ii], cornea_in_pic[ii], Scalar(233, 33, 33), 2);
		circle(src, pupil_in_pic[ii], 2, Scalar(255, 255, 255));
		circle(src, fixation_left_in_pic[ii], 2, Scalar(255, 255, 255));
		imshow("a", src);
		waitKey(0);
		string s = to_string(ii);
		s += ".bmp";
		imwrite(s, src);
	}*/

	return 0;
}